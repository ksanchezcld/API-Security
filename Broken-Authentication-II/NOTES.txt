Securing an API is a critical task. A poor API design may lead to system compromise. Its impact becomes more critical when a crucial service gets affected like a Banking API.

The Banking WebApp allows a user to update their password and email id after a successful login. The issue is that for one of the update requests, the API doesn't requires the authorization token to be passed. This allows anyone to make that request and reset the password for other users without being authorized to do that.

Note: The authorization system relies on a scope parameter in the issued token. If the token issued to a user has the scope of "account-write", then they get write access on the account, else, for token having the scope of "account-read", the user gets read-only access to the account.

Objective: Leverage the vulnerability to hijack admin's account and retrieve the Golden Ticket from the Bank API!

User Information:

Username	elliot
Password
elliotalderson

Admin Details:

Username	admin
Email
admin@dummybank.com
API Endpoints:

Endpoint
Description
Method
Parameter(s)
/issue
Issue a JWT Token used as an authorization mechanism
POST
identifier, password
/balance
Read the balance of an account
GET
acct, token
/balance
Modify the account balance
POST	acct, token, balance
/goldenticket
Get the Golden Ticket from the Bank API
POST	token

Instructions: 

This lab is dedicated to you! No other users are on this network :)
Once you start the lab, you will have access to a Kali GUI instance.
Your Kali instance has an interface with IP address 192.X.Y.2. Run "ifconfig" to know the values of X and Y.
The Banking WebApp is running on port 5000 on the target machine having IP address 192.X.Y.3.
Do not attack the gateway located at IP address 192.X.Y.1
